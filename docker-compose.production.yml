version: "3.8"

services:
  api:
    image: ${DOCKER_REGISTRY}language-toolkit-api:${DOCKER_IMAGE_TAG:-latest}
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: language-toolkit-api
    restart: always
    expose:
      - "${PORT:-8000}"
    volumes:
      - ./logs/api:/app/logs
      - ./temp:/app/temp
      - ./uploads:/app/uploads
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - PRODUCTION=true
    env_file:
      - .env.production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${PORT:-8000}/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - language-toolkit
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  nginx:
    image: nginx:alpine
    container_name: language-toolkit-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - ./nginx/html:/usr/share/nginx/html:ro
    environment:
      - DOMAIN=${DOMAIN}
    depends_on:
      - api
    networks:
      - language-toolkit
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: SSL certificate management with Certbot
  certbot:
    image: certbot/certbot:latest
    container_name: language-toolkit-certbot
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/html:/var/www/html
    command: certonly --webroot --webroot-path=/var/www/html --email ${EMAIL} --agree-tos --no-eff-email -d ${DOMAIN}
    profiles:
      - ssl-init

  # Optional: Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: language-toolkit-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - language-toolkit
    profiles:
      - with-cache

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: language-toolkit-prometheus
    restart: always
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - language-toolkit
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: language-toolkit-grafana
    restart: always
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - language-toolkit
    profiles:
      - monitoring

networks:
  language-toolkit:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  logs:
  temp:
  uploads:
  redis-data:
  prometheus-data:
  grafana-data: